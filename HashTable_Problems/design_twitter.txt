class Twitter {

    int timeStamp = 0;
    HashMap<Integer, List<int[]>> map = new HashMap<>();
    HashMap<Integer, Set<Integer>> map1 = new HashMap<>();

    public Twitter() {
        
    }
    
    public void postTweet(int userId, int tweetId) {
        map.putIfAbsent(userId, new ArrayList<>());
        map.get(userId).add(new int[] {timeStamp++, tweetId});
    }
    
    public List<Integer> getNewsFeed(int userId) {
        
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> Integer.compare(b[0], a[0]));

        Set<Integer> set = map1.getOrDefault(userId, new HashSet<>());

        set.add(userId);

        for(int followee : set){
            List<int[]> list = map.getOrDefault(followee, new ArrayList<>());
            pq.addAll(list);
        }

        List<Integer> res = new ArrayList<>();

        while(!pq.isEmpty() && res.size() < 10){
            res.add(pq.poll()[1]);
        }
        return res;
    }
    
    public void follow(int followerId, int followeeId) {
        map1.putIfAbsent(followerId, new HashSet<>());
        map1.get(followerId).add(followeeId);
    }
    
    public void unfollow(int followerId, int followeeId) {
        if(map1.containsKey(followerId)){
            map1.get(followerId).remove(followeeId);
        }
    }
}